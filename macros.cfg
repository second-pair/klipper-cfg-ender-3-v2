##  *--<Preface>--*  ##

#=-  Author Details  -=#
#  Blair Edwards
#  Personal Project

#=-  Part Of  -=#
#  second-pair/klipper-rigger

#=-  Notes  -=#
#  This is gonna be a big old work-in-progress.
#  These will be largely globally relevant, so I'll sync them back into the core branch eventually.
#!  Look at:  https://docs.mainsail.xyz/overview/features/macro-prompts

##  *--</Preface>--*  ##




##  *--<Main Config>--*  ##


#  Levelling

[gcode_macro BED_MESH_DEFAULT]
gcode:
	G28
	BED_MESH_CALIBRATE METHOD=automatic
	SAVE_CONFIG

[gcode_macro BED_LOAD_DEFAULT]
gcode:
	BED_MESH_PROFILE LOAD=default
	BED_MESH_OUTPUT PGP=1

[gcode_macro BED_SCREWS_ADJUST_]
gcode:
	BED_SCREWS_ADJUST


#  Print Processing
[exclude_object]
[pause_resume]


#  System
[idle_timeout]
timeout:  1800  #  30 Minutes
gcode:
	TURN_OFF_HEATERS
	M84  ;  Disable Steppers
	M117 Idle Timeout Reached


#  Pause / Resume / Park
[gcode_macro _PARK]
gcode:
	SAVE_GCODE_STATE NAME=_PARK
	M118 Executing pause.
	G91  ;  Relative Positioning
	G1 Z0.2 F{30*60}  ;  Raise Z a touch.
	G1 X5 Y5 F{60*60}  ;  Wipe out.
	G1 Z10 F{60*60}  ;  Raise Z some more.
	G90  ;  Absolute Positioning
	#  Move to the back.
	G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y-10} F{60*60}
	RESTORE_GCODE_STATE NAME=_PARK

[gcode_macro PAUSE]
description:  Pause, but go to my _PARK position.
rename_existing:  PAUSE_BASE
gcode:
	SAVE_GCODE_STATE NAME=PAUSE
	G91  ;  Relative Positioning
	G1 E-1 F4000  ;  Retract a bit.
	RESTORE_GCODE_STATE NAME=PAUSE
	PAUSE_BASE
	_PARK

[gcode_macro RESUME]
description:  Resume from my _PARK position.
rename_existing:  RESUME_BASE
gcode:
	SAVE_GCODE_STATE NAME=RESUME
	G91  ;  Relative Positioning
	G1 E1 F4000  ;  Retract a bit.
	G90  ;  Absolute Positioning
	RESTORE_GCODE_STATE NAME=RESUME
	RESUME_BASE


#  Printing

[gcode_macro START_PRINT]
gcode:
	#  Fetch the slicer-provided variables.
	{% set target_bed = params.BED_TEMP|int %}
	{% set target_extruder = params.EXTRUDER_TEMP|int %}
	M117 Preparing Print

	#  Firstly, get up to temperature.  Heat both simultaneously.
	#  Perform a retract when we get to the 180°C mark.
	#  Set bed and hotend to desired temperatures.
	M118 Heating up.
	M140 S{target_bed}
	M104 S{target_extruder}

	#  Home the printer & load the bed mesh.
	M118 Performing homing routine.
	G28
	BED_MESH_PROFILE LOAD=default

	#  Wait for the hotend to get to 40°C below setpoint.
	M118 Waiting for retract temperature.
	#{%if < {target_extruder - 40} %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder - 40} MAXIMUM={target_extruder + 1}
	#  Perform a quick retract.
	G92 E0  ;  Reset Extrusion Distance
	M83  ;  Extruder -> Relative Positioning
	G1 E-1 F4000  ;  Retract a bit as soon as we're up to temperature.

	#  Wait for hotend and bed temperature to be reached.
	M118 Waiting for print temperature.
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={target_bed} MAXIMUM={target_bed + 1}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={target_extruder} MAXIMUM={target_extruder + 1}

	#  Undo the retraction we did earlier and from the end of the last print.
	G1 E2 F4000
	#  Print a prime line.
	#  'PRIME_BLOB' is also an option, but I just don't think it works as well and seems to use more filament to do so.
	PRIME_LINE

	#  Ready to print!
	M117 Printing

[gcode_macro END_PRINT]
gcode:
	M118 Finishing print.
	#  Detach from the Print
	M83  ;  Extruder -> Relative Positioning
	G1 E-1 F4000  ;  Retract a bit.
	#  Move to Pause position / present the print.
	_PARK
	#  Turn everything off & let the fan config do the rest.
	TURN_OFF_HEATERS
	M84;  Disable motors.
	M117 Print Complete

#  RatOS Prime Line Macro
[gcode_macro PRIME_LINE]
description: Prints a primeline, used internally, if configured, as part of the START_PRINT macro.
gcode:
	#!  SAVE_GCODE_STATE NAME=prime_line_state
	{% set speed = 60*60 %}
	M117 Performing Prime - Line
	M118 Priming nozzle with prime line.
	# Lift 5 mm
	G91  ;  Relative Positioning
	G1 Z5 F{speed}
	# Move to prime area
	G90  ;  Absolute Positioning
	G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} F{speed}
	# Get ready to prime
	G1 Z0.3 F3000
	# Prime nozzle
	M83  ;  Extruder -> Relative Positioning
	G1 Y{printer.toolhead.axis_minimum.y + 80} E16 F1200
	# Wipe
	G1 Y{printer.toolhead.axis_minimum.y + 100} F{speed}
	M82  ;  Extruder -> Absolute Positioning
	G92 E0  ;  Reset Extrusion Distance
	M118 Prime line complete.
	#!  RESTORE_GCODE_STATE NAME=prime_line_state

#  RatOS Prime Blob Macro
[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. Slower than PRIME_LINE but much more effective.
gcode:
	SAVE_GCODE_STATE NAME=prime_blob_state
	{% set speed = 60*60 %}
	M117 Performing Prime - Blob
	M118 Priming nozzle with prime blob.
	# Absolute positioning
	G90
	# Relative extrusion
	M83
	# Lift 5 mm
	G1 Z5 F3000
	# move to blob position
	G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F{speed}
	# Extrude a blob
	G1 F60 E20
	# 40% fan
	M106 S102
	# Move the extruder up by 5mm while extruding, breaks away from blob
	G1 Z5 F100 E5
	# Move to wipe position, but keep extruding so the wipe is attached to blob
	G1 F200 Y{printer.toolhead.axis_minimum.y + 25} E1
	# Go down diagonally while extruding
	# Broken down in z moves under 2mm as a workaround for a tuning tower test.
	# The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
	G1 F200 Y{printer.toolhead.axis_minimum.y + 30} Z3.8 E0.5
	G1 F200 Y{printer.toolhead.axis_minimum.y + 35} Z2.6 E0.5
	G1 F200 Y{printer.toolhead.axis_minimum.y + 40} Z1.4 E0.5
	G1 F200 Y{printer.toolhead.axis_minimum.y + 45} Z0.2 E0.5
	# 0% fan
	M106 S0
	# small wipe line
	G1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.2 E0.6
	# Break away wipe
	G1 F{speed} Y{printer.toolhead.axis_minimum.y + 100}
	M118 Prime blob complete.
	RESTORE_GCODE_STATE NAME=prime_blob_state


#  Testing

#  https://github.com/AndrewEllis93/Print-Tuning-Guide/blob/main/macros/TEST_SPEED.cfg
#  Modified to update which iteration we're currently working on.
[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}

    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}

    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}

        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED

    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }

    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %}
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
		M117 Iteration {i+1} of {iterations}.
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}

        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}

        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}

        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED


##  *--<Main Config>--*  ##
